import{_ as o,a as l,b as i,c as p,d as r,e as u}from"./compose-multiplaform-c85bc549.js";import{_ as c,M as d,p as m,q as k,R as e,t as n,N as a,a1 as t}from"./framework-5866ffd3.js";const h={},b=e("h1",{id:"developpement-frontend-25min",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#developpement-frontend-25min","aria-hidden":"true"},"#"),n(" D√©veloppement frontend (25min)")],-1),v=e("p",null,"Kotlin supporte une large s√©lection de frameworks frontaux sur toutes les plateformes : mobile, desktop et web. Vous trouverez ci-dessous un aper√ßu des possibilit√©s que vous pouvez faire directement √† partir d'IntelliJ :",-1),f={href:"https://openjfx.io/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://tornadofx.io/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://www.jetbrains.com/lp/compose-mpp/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://ktor.io/docs/creating-interactive-website.html",target:"_blank",rel:"noopener noreferrer"},M={href:"https://freemarker.apache.org/",target:"_blank",rel:"noopener noreferrer"},x=e("li",null,"Avec KotlinJS, les d√©veloppeurs peuvent cr√©er des applications React, nodsjs ou vanilla JS en utilisant Kotlin.",-1),C=e("li",null,"Kotlin WASM se compile en Web Assembly. Il peut compl√©ter KotlinJS pour les t√¢ches √† forte intensit√© de calcul.",-1),K={href:"https://www.jetbrains.com/lp/compose-mpp/",target:"_blank",rel:"noopener noreferrer"},S={href:"https://developer.android.com/jetpack/compose",target:"_blank",rel:"noopener noreferrer"},q=e("strong",null,"layout XML",-1),y={href:"https://www.jetbrains.com/lp/compose-mpp/",target:"_blank",rel:"noopener noreferrer"},z=e("p",null,[n("Comme nous pouvons le voir, Kotlin propose plusieurs options. L'option la plus s√©duisante en terme de partage de code est Compose Multiplatform. Ceci est possible notamment gr√¢ce √† "),e("strong",null,"KMP et KMM")],-1),A=e("h2",{id:"kmp-kmm",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#kmp-kmm","aria-hidden":"true"},"#"),n(" KMP & KMM")],-1),j=e("li",null,"KMP (Kotlin Multiplatform) et KMM (Kotlin Multiplatform Mobile) sont les deux technologies Kotlin qui permettent de partager une base de code unique sur plusieurs cibles.",-1),W={href:"https://blog.jetbrains.com/kotlin/2021/08/compose-multiplatform-goes-alpha/",target:"_blank",rel:"noopener noreferrer"},J=e("p",null,[e("img",{src:"https://kotlinlang.org/docs/images/kotlin-multiplatform.png",alt:"KMP",loading:"lazy"})],-1),I={href:"https://kotlinlang.org/docs/multiplatform-full-stack-app.html",target:"_blank",rel:"noopener noreferrer"},D={href:"https://kotlinlang.org/docs/multiplatform-library.html",target:"_blank",rel:"noopener noreferrer"},P={href:"https://kotlinlang.org/lp/mobile/",target:"_blank",rel:"noopener noreferrer"},L=e("li",null,"KMM est bas√© sur KMP et vise √† aider les d√©veloppeurs mobiles √† cr√©er un SDK multiplateforme pour le mobile de fa√ßon ais√©e.",-1),B=t('<p><img src="https://kotlinlang.org/lp/mobile/static/sdk-313e52f7d9d3b3e3e48471ef06e8e3aa.svg" alt="KMM" loading="lazy"></p><p>Dans la suite de ce chapitre, nous explorerons les diff√©rentes possibilit√©s individuellement et on fera un projet KMP dans le chapitre suivant.</p><h2 id="kotlin-js-et-kotlin-wasm" tabindex="-1"><a class="header-anchor" href="#kotlin-js-et-kotlin-wasm" aria-hidden="true">#</a> Kotlin/JS et Kotlin/WASM</h2><ul><li>Kotlin/JS peut √©galement cibler le web et m√™me utiliser des frameworks web (tels que react) dans Kolitn.</li><li>Kotlin WASM est une autre possibilit√© de cibler le web, mais il g√©n√®re WASM au lieu de code JS pur. <ul><li>Il peut √™tre utilis√© par exemple pour d√©velopper des biblioth√®ques √† forte intensit√© de calcul.</li></ul></li><li>Nous pourrons peut-√™tre faire encore plus √† l&#39;avenir gr√¢ce √† l&#39;√©volution de toutes ces technologies (Kotlin, WASM et Kotlin/WASM). - Par exemple, [WASI] (https://wasi.dev/) permet √† WASM de communiquer avec le syst√®me d&#39;exploitation. - Cela signifie que je pourrais voir des projets Kotlin/WASM √† l&#39;avenir qui peuvent cibler √† la fois le navigateur et le syst√®me d&#39;exploitation.</li><li>Continuons √† observer üòÑ.</li></ul><h3 id="tp-application-web-kotlin-wasm" tabindex="-1"><a class="header-anchor" href="#tp-application-web-kotlin-wasm" aria-hidden="true">#</a> TP : Application web Kotlin/WASM</h3>',5),T=t("<li>Les assistants de cr√©ation de projet Kotlin/WASM et Kotlin/JS sur IntelliJ fonctionnent de mani√®re similaire: <ul><li>L&#39;IDE g√©n√®re un fichier Kotlin qui sera compil√© par la suite en WASM et/ou JS. Kotlin/JS ne g√©n√®re que du JS tandis que Kotin/WASM g√©n√®re √† la fois du JS et du WASM.</li><li>Dans les deux cas, le point d&#39;entr√©e du code g√©n√©r√© est un fichier JS appel√© <strong>nom_du_module.js</strong>.</li><li>L&#39;IDE g√©n√®re √©galement dans le dossier des ressources un fichier <strong>index.html</strong> dont le but est de charger le JS g√©n√©r√© (le fichier <strong>nom_du_module.js</strong>).</li><li>La t√¢che <code>wasmBrowserDevelopmentRun</code> ou <code>jsWasmBrowserDevelopmentRun</code> lancera un serveur local qui h√©bergera √† la fois les fichiers <strong>index.html</strong> et les fichiers JS et WASM g√©n√©r√©s.</li></ul></li>",1),N=e("strong",null,"kotlin.wasm.wizard",-1),O={href:"https://github.com/worldline/learning-kotlin/tree/main/material/kotlin-wasm-starter",target:"_blank",rel:"noopener noreferrer"},V=t('<p><img src="'+l+'" alt="" loading="lazy"></p><ul><li>V√©rifiez qu&#39;on est sur la derni√®re version de Kotlin dans <strong>build.gradle.kts</strong> (l&#39;assistant peut le configurer √† une version ant√©rieure).</li><li>Ouvrez <strong>src/wasmMain/kotlin/sample.kt</strong> et cliquez sur le bouton <strong>lancer</strong> qui appara√Æt √† c√¥t√© de la fonction <code>main</code>.</li><li>Si la compilation √©choue parce que l&#39;IDE a utilis√© la mauvaise t√¢che gradle, veuillez la changer en <code>wasmBrowserDevelopmentRun</code> et essayez de l&#39;ex√©cuter √† nouveau.</li></ul><p><img src="'+i+'" alt="" loading="lazy"><img src="'+p+'" alt="" loading="lazy"></p>',3),E={href:"http://localhost:8080/",target:"_blank",rel:"noopener noreferrer"},R=e("li",null,"‚ö†Ô∏è Il se peut que vous deviez activer certains drapeaux sur votre navigateur pour que l'application fonctionne. Si vous voyez une page blanche, veuillez lire les journaux du navigateur pour v√©rifier les instructions.",-1),F=e("p",null,[e("img",{src:o,alt:"",loading:"lazy"})],-1),G=e("li",null,[n("Le fichier wasm g√©n√©r√© est disponible dans "),e("strong",null,"build/js/packages/nom_du_projet/kotlin")],-1),U=e("li",null,[n("Nous pouvons soit installer [WABT (The WebAssembly Binary Toolkit ou wabbit)] (https://github.com/WebAssembly/wabt) et utiliser l'outil "),e("em",null,"wasm2wattool"),n(),e("code",null,"wasm2wat --enable-all -v .\\kotlin-wasm-demo-wasm.wasm -o wasm.wat"),n(",")],-1),X={href:"https://webassembly.github.io/wabt/demo/wasm2wat/",target:"_blank",rel:"noopener noreferrer"},$=e("li",null,"‚ùó Cependant, je n'ai pas r√©ussi √† le faire fonctionner",-1),H=e("h3",{id:"pw-application-web-kotlinjs",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#pw-application-web-kotlinjs","aria-hidden":"true"},"#"),n(" PW : Application web KotlinJS")],-1),Q=e("p",null,"L'assistant Kotlin/JS cr√©e une application tr√®s similaire √† celle de Kotlin/WASM. Dans un prochain PW, nous cr√©erons une application compl√®te avec Ktor et Kotlin/JS.",-1),Y=e("h2",{id:"compose",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#compose","aria-hidden":"true"},"#"),n(" Compose")],-1),Z={href:"https://blog.jetbrains.com/kotlin/2021/08/compose-multiplatform-goes-alpha/",target:"_blank",rel:"noopener noreferrer"},ee={class:"custom-container warning"},ne=e("p",{class:"custom-container-title"},"Compose multiplatform vs Jetpack Compose",-1),se={href:"https://developer.android.com/jetpack/compose/tutorial",target:"_blank",rel:"noopener noreferrer"},ae=t(`<div class="custom-container tip"><p class="custom-container-title">Compose Web vs Compose for Web Canvas</p><ul><li>La surface de l&#39;API de Compose Web est diff√©rente des autres cibles de Compose car elle travaille directement avec le DOM.</li><li>Compose for Web Canvas a la m√™me surface d&#39;API que celle du Desktop, Android et iOS car il dessine sur un Canvas et ne manipule pas le DOM.</li></ul><p>Cela signifie que le premier a un meilleur support web et que le second a plus de code r√©utilisable.</p></div><h3 id="tp-compose-web" tabindex="-1"><a class="header-anchor" href="#tp-compose-web" aria-hidden="true">#</a> TP : Compose Web</h3><ul><li>Cr√©ez un nouveau projet IntelliJ -&gt; Compose Multiplaform.</li><li>Choisissez &quot;Single platform&quot; -&gt; &quot;Web&quot; et remplissez les autres champs.</li><li>Choisissez <strong>Finish</strong></li><li>IntelliJ peut prendre un certain temps pour pr√©parer le projet et peut demander d&#39;installer des plugins suppl√©mentaires.</li><li>Lancez le serveur de d√©veloppement de l&#39;application web √† l&#39;aide de la commande <code> ./gradlew jsBrowserRun --continuous</code>.</li><li>Modifiez <code>Main.kt</code> comme suit et lancez l&#39;application.</li><li>Ouvrez cette adresse : <code>localhost:8080</code>.</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">renderComposable</span><span class="token punctuation">(</span>rootElementId <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;root&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">Div</span><span class="token punctuation">(</span><span class="token punctuation">{</span> style <span class="token punctuation">{</span> <span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">.</span>px<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> expanded <span class="token keyword">by</span> remember <span class="token punctuation">{</span> <span class="token function">mutableStateOf</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
            <span class="token function">Button</span><span class="token punctuation">(</span>
                attrs <span class="token operator">=</span> <span class="token punctuation">{</span>
                    onClick <span class="token punctuation">{</span> expanded <span class="token operator">=</span> <span class="token operator">!</span>expanded <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Cliquez sur moi&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
            <span class="token function">Div</span><span class="token punctuation">(</span><span class="token punctuation">{</span> style <span class="token punctuation">{</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token punctuation">(</span>expanded<span class="token punctuation">)</span> DisplayStyle<span class="token punctuation">.</span>Block <span class="token keyword">else</span> DisplayStyle<span class="token punctuation">.</span>None<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Cliquez sur moi !&quot;</span></span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+r+`" alt="compose multiplatform demo" loading="lazy"></p><h3 id="tp-compose-desktop-android-app" tabindex="-1"><a class="header-anchor" href="#tp-compose-desktop-android-app" aria-hidden="true">#</a> TP : Compose desktop + Android app</h3><ul><li>Cr√©ez un nouveau projet sur IntelliJ -&gt; Compose Multiplatform.</li><li>Choisissez &quot;multiple platforms&quot; et remplissez les autres champs. Choisissez ensuite <strong>Finish</strong>.</li><li>IntelliJ commence √† pr√©parer le projet et peut demander l&#39;installation de plugins.</li><li>Une fois le projet pr√™t, lancez l&#39;application Android en utilisant le bouton vert run.</li><li>Lancez l&#39;application desktop en ex√©cutant la fonction principale du projet desktop (qui devrait se trouver dans <code>Main.kt</code>).</li><li>Modifiez <code>App.kt</code> dans le projet principal comme suit et lancez l&#39;application.</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Composable</span>
<span class="token keyword">fun</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> platformName <span class="token operator">=</span> <span class="token function">getPlatformName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    Card <span class="token punctuation">{</span>
        <span class="token keyword">var</span> expanded <span class="token keyword">by</span> remember <span class="token punctuation">{</span> <span class="token function">mutableStateOf</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
        <span class="token function">Column</span><span class="token punctuation">(</span>Modifier<span class="token punctuation">.</span><span class="token function">clickable</span> <span class="token punctuation">{</span> expanded <span class="token operator">=</span> <span class="token operator">!</span>expanded <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">Texte</span><span class="token punctuation">(</span>
                text<span class="token operator">=</span><span class="token string-literal singleline"><span class="token string">&quot;Cliquez sur moi !&quot;</span></span><span class="token punctuation">,</span>
                style <span class="token operator">=</span> MaterialTheme<span class="token punctuation">.</span>typography<span class="token punctuation">.</span>h2
            <span class="token punctuation">)</span>
            <span class="token function">AnimatedVisibility</span><span class="token punctuation">(</span>expanded<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token function">Texte</span><span class="token punctuation">(</span>
                    text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Bonjour, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">platformName</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> üéä&quot;</span></span><span class="token punctuation">,</span>
                    style <span class="token operator">=</span> MaterialTheme<span class="token punctuation">.</span>typography<span class="token punctuation">.</span>h1
                <span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+u+'" alt="compose multiplatform demo" loading="lazy"></p><h2 id="pour-aller-plus-loin" tabindex="-1"><a class="header-anchor" href="#pour-aller-plus-loin" aria-hidden="true">#</a> Pour aller plus loin</h2>',10),te={href:"https://seb.deleuze.fr/the-huge-potential-of-kotlin-wasm/",target:"_blank",rel:"noopener noreferrer"};function oe(le,ie){const s=d("ExternalLinkIcon");return m(),k("div",null,[b,v,e("ul",null,[e("li",null,[n("C√¥t√© bureau "),e("ul",null,[e("li",null,[n("Gr√¢ce au support de la JVM, Kotlin supporte "),e("a",f,[n("JavaFX"),a(s)]),n(". üí° Il existe m√™me un √©quivalent en Kotlin appel√© "),e("a",g,[n("tornadofx"),a(s)]),n(".")]),e("li",null,[e("a",_,[n("Compose Multiplatform"),a(s)]),n(" apporte l'API Jetpack Compose sur le bureau, le web et le mobile.")])])]),e("li",null,[n("Sur le web "),e("ul",null,[e("li",null,[e("a",w,[n("Ktor"),a(s)]),n(" peut utiliser des moteurs de mod√®les "),e("a",M,[n("tels que FreeMarker"),a(s)]),n(" pour cr√©er des pages de serveur.")]),x,C,e("li",null,[e("a",K,[n("Compose Multiplatform"),a(s)]),n(" apporte deux options sur le web: Compose web et Compose for Web Canvas.")])])]),e("li",null,[n("Sur les mobiles "),e("ul",null,[e("li",null,[n("Les d√©veloppeurs Android utilisent "),e("a",S,[n("Jetpack Compose"),a(s)]),n(" ou l'ancienne m√©thode de "),q,n(".")]),e("li",null,[e("a",y,[n("Compose Multiplatform"),a(s)]),n(" supporte Android de fa√ßon stable et iOS de fa√ßon exp√©rimentale.")])])])]),z,A,e("ul",null,[j,e("li",null,[e("a",W,[n("KMP"),a(s)]),n(" s'appuie sur Kotlin native et d'autres fonctionnalit√©s de Kotlin pour aider les d√©veloppeurs √† cr√©er des projets destin√©s √† plusieurs plates-formes en utilisant une base de code Kotlin commune.")])]),J,e("ul",null,[e("li",null,[n("De nombreuses combinaisons de cibles et de cas d'utilisation sont possibles : "),e("ul",null,[e("li",null,[e("a",I,[n("Full-Stack web apps"),a(s)]),n(" : Un projet qui contient un backend et une application web tout en partageant une logique commune.")]),e("li",null,[e("a",D,[n("Biblioth√®ques multiplateformes"),a(s)])]),e("li",null,[e("a",P,[n("KMM"),a(s)]),n(" : d√©nomination sp√©ciale pour KMP lorsqu'il est utilis√© pour des projets iOS et Android.")])])]),L]),B,e("ul",null,[T,e("li",null,[n("Cr√©ons une application Kotlin/WASM. Tout d'abord, activez l'assistant Kotlin/WASM en activant "),N,n(` dans le registre d'IntelliJ (ouvrez le registre en appuyant deux fois sur shift et en tapant "registry" dans la bo√Æte de recherche). Alternativement, clonez `),e("a",O,[n("ce projet"),a(s)]),n(".")])]),V,e("ul",null,[e("li",null,[n("Le serveur de d√©veloppement devrait d√©marrer et vous pouvez ouvrir votre application web sur "),e("a",E,[n("http://localhost:8080/"),a(s)])]),R]),F,e("ul",null,[G,e("li",null,[n("WASM √©tant un format binaire, nous devons d'abord le convertir au format texte. "),e("ul",null,[U,e("li",null,[n("ou utiliser un convertisseur en ligne "),e("a",X,[n("comme celui-ci"),a(s)])]),$])])]),H,Q,Y,e("p",null,[e("a",Z,[n("Compose multiplatform"),a(s)]),n(" est une famille de frameworks d'interface utilisateur d√©claratifs pour Android (Jetpack Compose), le bureau (Compose Desktop) et le web (Compose Web). Il dispose d'un support exp√©rimental pour iOS et Web Canvas.")]),e("div",ee,[ne,e("p",null,[n("Bien que tr√®s similaire, Compose multiplatform est diff√©rent de Jetpack Compose car ce dernier n'est compatible qu'avec Android. Google fournit un "),e("a",se,[n("JetPack compose tutorial"),a(s)]),n(" pour le d√©veloppement Android.")])]),ae,e("ul",null,[e("li",null,[e("a",te,[n("L'√©norme potentiel de Kotlin/Wasm"),a(s)])])])])}const ue=c(h,[["render",oe],["__file","index.html.vue"]]);export{ue as default};
