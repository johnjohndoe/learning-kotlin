import{_ as s,a,b as r,c as i,d}from"./fs-kmp-webcanvas-architecture.drawio-2659deec.js";import{_ as c,M as h,p,q as u,R as e,N as l,t as o,a1 as n}from"./framework-5866ffd3.js";const m="/learning-kotlin/assets/compose-web-demo-d50aa5c6.png",f={},_=e("h1",{id:"cross-plaform-and-fullstack-app-codelab-60min",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#cross-plaform-and-fullstack-app-codelab-60min","aria-hidden":"true"},"#"),o(" Cross-plaform and Fullstack app Codelab (60min)")],-1),g=e("h2",{id:"pw-cross-platform-app-kmm-kmp-for-android-ios-and-desktop",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#pw-cross-platform-app-kmm-kmp-for-android-ios-and-desktop","aria-hidden":"true"},"#"),o(" PW : Cross-platform app + KMM + KMP for Android, iOS and Desktop")],-1),b=e("p",null,"By combining KMP, KMM and Compose, it is possible to fully develop cross-platform mobile and desktop apps using only Kotlin.",-1),k={href:"https://worldline.github.io/learning-kotlin-multiplatform/",target:"_blank",rel:"noopener noreferrer"},w=e("img",{src:s,alt:"kmp codelab",loading:"lazy"},null,-1),v=e("br",null,null,-1),A={href:"https://worldline.github.io/learning-kotlin-multiplatform/",target:"_blank",rel:"noopener noreferrer"},x=e("h2",{id:"pw-add-a-ktor-server-app",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#pw-add-a-ktor-server-app","aria-hidden":"true"},"#"),o(" PW : Add a Ktor server App")],-1),j=e("p",null,"We'll extend the previous app with a Ktor server and a React web client. The project will have the following architecture. This architecture choice may be subject to discussion, but we'll stick with this for now.",-1),M=e("p",null,[e("img",{src:a,alt:"architecture",loading:"lazy"})],-1),y=n("<li>Add a module into the project called <strong>sharedFullStack</strong> which will contain: <ul><li>In <em>commonMain</em>: Some shared code that will by used by the <strong>shared</strong> project.</li><li>In <em>jvmMain</em>: A Ktor server that serves a Rest API to provide the <em>questions</em> and hosts some html files. One of the HTML files will load a react app that will be developed in Kotlin/JS.</li><li>In <em>jsMain</em>: A react web client. This target will only generate the JS code, the HTML page that loads this will be provided by Ktor server as explained above.</li><li>üí° With IntelliJ you can right click on <strong>xxxMain/kotlin</strong> and <strong>xxxMain/resources</strong> folders and use <strong>Mark Directory as</strong> to get more support from the IDE.</li></ul></li>",1),S=n("<li>plugins: <code>multiplatform</code>, <code>serialilzation</code> and <code>application</code>. The latter will be used to specify the main file the server which will be run with the <code>run</code> task.</li><li>Add the <code>kotlin(&quot;multiplatform&quot;)</code> plugin and target all possible platforms (web, desktop, jvm ans mobile) for completeness.</li><li>The depdencies should be as follows: <ul><li><em>commonMain</em>: kotr client (since we want to add the API client into the shared code)</li><li><em>jvmMain</em>: ktor server + json sertialzation + cors (so that the html can load the JS)</li><li><em>jsMain</em>: Kotlin React</li></ul></li><li>We need to add two tasks, the first one produces the JS react app and the other one copies into the resources of the Ktor server</li><li>Set the main class of the <code>application</code> plugin.</li>",5),C={href:"https://github.com/worldline/learning-kotlin/blob/main/material/kmm-fullstack-demo/sharedFullStack/build.gradle.kts",target:"_blank",rel:"noopener noreferrer"},T=n("<li>Move the API model and client files from <strong>shared</strong> to <strong>sharedFullStack</strong> (<code>Anwser</code>, <code>Quiz</code>, <code>Question</code>, <code>QuizAPI</code> and <code>QuizRepository</code>)</li><li>‚ö†Ô∏è Some things to take note of: <ul><li>In the android build file, add <strong>io.netty.versions.properties</strong> and <strong>INDEX.LIST</strong> to</li><li>Our global clean task may conflict with Kotlin/JS&#39;s one, if that the case, we can fix this by renaming our clean task in the root <strong>build.gradle.kts</strong> packagingOptions excludes.</li></ul></li><li>Write the necessary code for both the server and the client. The server should provide these endpoints: <ul><li>A GET on <code>/</code> provides an html file that loads <strong>sharedFullStack.js</strong> because this is the name of the JS that is generated.</li><li>A GET on <code>/quiz</code> provides a JSON of server generated <code>Quiz</code></li><li>A GET on <code>/quiz.html</code> servers a server generated HTML page using the HTML DSL</li></ul></li><li>Change the <code>QuizAPI</code> class so that it calls our local server <em>http://localhost:8081/quiz</em> and remove the arguments of the json method above since the server sets the correct headers.</li><li>Launch the gradle task &quot;application -&gt; run&quot; of the <strong>sharedFullStack</strong> module, which will copy the generated JS into the Ktor server ressources folder.</li><li>Open <em>http://localhost:8081</em> to run the react App</li>",6),W=e("p",null,[e("img",{src:r,alt:"kmm-fs-react-demo",loading:"lazy"})],-1),I=e("ul",null,[e("li",null,"Run the desktop app which fetches the quiz from the local server.")],-1),K=e("p",null,[e("img",{src:i,alt:"",loading:"lazy"})],-1),J=e("ul",null,[e("li",null,"Testing on mobile is a little bit more complex because localhost may be mapped to another address non secure HTTP is blocked by default.")],-1),z={href:"https://github.com/worldline/learning-kotlin/tree/main/material/kmm-fullstack-demo",target:"_blank",rel:"noopener noreferrer"},L=e("strong",null,"sharedFullStack",-1),P=e("h2",{id:"pw-add-a-compose-for-web-canvas-target-experimental",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#pw-add-a-compose-for-web-canvas-target-experimental","aria-hidden":"true"},"#"),o(" PW: Add a Compose for Web Canvas target (experimental)")],-1),B=e("p",null,"Compose for Web Canvas allows to use the same API surface as Compose Desktop and Android. Let's add another module to try this out.",-1),D=e("p",null,[e("img",{src:d,alt:"architecture web canvas",loading:"lazy"})],-1),q=e("li",null,[o("In the root "),e("strong",null,"settings.gradle.kts"),o(", add this maven repository "),e("code",null,'maven("https://maven.pkg.jetbrains.space/public/p/compose/dev")'),o(" that has Compose for Web Canvas dependencies.")],-1),R=e("li",null,[o("In "),e("strong",null,"gradle.properties"),o(" add this line "),e("code",null,"org.jetbrains.compose.experimental.jscanvas.enabled=true"),o(".")],-1),E=e("strong",null,"shared",-1),F=e("code",null,"js(IR) { browser() }",-1),H=e("strong",null,"jsMain",-1),N=e("code",null,"compose.web.core",-1),O=e("code",null,"compose.ui",-1),V=e("code",null,"compose.material3",-1),Q=e("code",null,"Platform",-1),G=e("code",null,"App",-1),U={href:"https://github.com/worldline/learning-kotlin/tree/main/material/kmm-fullstack-demo/shared/src/jsMain/kotlin/com/devoxxfr2023/km",target:"_blank",rel:"noopener noreferrer"},X=e("li",null,[o("Add a module named "),e("strong",null,"composeWebCanvasApp"),o(" and define it as a Kotlin/JS web app. "),e("ul",null,[e("li",null,[o("add "),e("code",null,"src/jsMain/kotlin"),o(" folder and "),e("code",null,"src/jsMain/resources"),o(" folder")]),e("li",null,[o("üí° With IntelliJ you can right click on these folders and use "),e("strong",null,"Mark Directory as"),o(" to get more help later from the IDE.")])])],-1),Y=e("strong",null,"js",-1),Z={href:"https://github.com/worldline/learning-kotlin/blob/main/material/kmm-fullstack-demo/composeWebCanvasApp/build.gradle.kts",target:"_blank",rel:"noopener noreferrer"},$=e("li",null,[o("The one that is generated by Kotlin/JS and should be named "),e("strong",null,"composeWebCanvasApp.js"),o(".")],-1),ee=e("li",null,[e("strong",null,"skiko.js"),o(" which is dependency of Compose for Web Canvas.")],-1),oe={href:"https://github.com/worldline/learning-kotlin/blob/main/material/kmm-fullstack-demo/composeWebCanvasApp/src/jsMain/resources/index.html",target:"_blank",rel:"noopener noreferrer"},te=e("code",null,"App()",-1),le=e("code",null,"Text",-1),ne={href:"https://github.com/worldline/learning-kotlin/blob/main/material/kmm-fullstack-demo/composeWebCanvasApp/src/jsMain/kotlin/tech/worldline/demo/BrowserViewportWindow.kt",target:"_blank",rel:"noopener noreferrer"},se=e("code",null,"BrowserViewportWindow",-1),ae={href:"https://github.com/worldline/learning-kotlin/blob/main/material/kmm-fullstack-demo/composeWebCanvasApp/src/jsMain/kotlin/tech/worldline/demo/AppTheme.kt",target:"_blank",rel:"noopener noreferrer"},re={href:"https://github.com/worldline/learning-kotlin/blob/main/material/kmm-fullstack-demo/composeWebCanvasApp/src/jsMain/kotlin/tech/worldline/demo/MainWeb.kt",target:"_blank",rel:"noopener noreferrer"},ie=e("li",null,[o("Run the app by launching the "),e("code",null,"jsBrowserDevelopmentRun"),o(" gradle task of the "),e("strong",null,"composeWebCanvasApp"),o(" module.")],-1),de=e("p",null,[e("img",{src:m,alt:"",loading:"lazy"})],-1),ce={href:"https://github.com/worldline/learning-kotlin/tree/main/material/kmm-fullstack-demo",target:"_blank",rel:"noopener noreferrer"},he=e("strong",null,"composeWebCanvasApp",-1),pe=e("h2",{id:"going-futher",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#going-futher","aria-hidden":"true"},"#"),o(" Going futher")],-1),ue=e("ul",null,[e("li",null,"Add a Compose Web target to the project")],-1),me=e("h2",{id:"sources-and-references",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#sources-and-references","aria-hidden":"true"},"#"),o(" Sources and references")],-1),fe={href:"https://github.com/kotlin-hands-on/jvm-js-fullstack",target:"_blank",rel:"noopener noreferrer"},_e={href:"https://kotlinlang.org/docs/multiplatform-full-stack-app.html",target:"_blank",rel:"noopener noreferrer"},ge={href:"https://kotlinlang.org/docs/js-react.htm",target:"_blank",rel:"noopener noreferrer"},be={href:"https://github.com/JetBrains/skiko",target:"_blank",rel:"noopener noreferrer"},ke={href:"https://github.com/burnoo/DemoListApp",target:"_blank",rel:"noopener noreferrer"};function we(ve,Ae){const t=h("ExternalLinkIcon");return p(),u("div",null,[_,g,b,e("p",null,[e("a",k,[w,l(t)]),v,e("em",null,[o("This pw is so huge "),e("a",A,[o("that it has its own codelab"),l(t)])])]),x,j,M,e("ul",null,[y,e("li",null,[o("Update the build file of this new module as follows: "),e("ul",null,[S,e("li",null,[o("The file should "),e("a",C,[o("look as follows"),l(t)])])])]),T]),W,I,K,J,e("p",null,[o("The final project is "),e("a",z,[o("available here"),l(t)]),o(" in the "),L,o(" module.")]),P,B,D,e("ul",null,[q,R,e("li",null,[o("In the "),E,o(" module's build file, add a "),F,o(" target and a "),H,o(" sourceSet with these dependencies: "),N,o(", "),O,o(" and "),V,e("ul",null,[e("li",null,[o("Implement the "),Q,o(" file and provide a composable for the "),G,o(". Here is an "),e("a",U,[o("example implementation"),l(t)])])])]),X,e("li",null,[o("Set the "),Y,o(" target in the build file with Compose for Web Canvas dependencies "),e("ul",null,[e("li",null,[o("The build file should be similar "),e("a",Z,[o("to this one"),l(t)])])])]),e("li",null,[o("In the resources folder, create an index.html file that loads the JS files: "),e("ul",null,[$,ee,e("li",null,[o("Here is an example "),e("a",oe,[o("of such file"),l(t)])])])]),e("li",null,[o("‚ö†Ô∏è The current "),te,o(" imported from main crashes on this target because we are not using precompose for the web. In the current correction we just place a "),le,o(" while we look for a fix. "),e("ul",null,[e("li",null,[o("Add this "),e("a",ne,[o("Kotlin file"),l(t)]),o(" which defines a "),se,o(" that allows to render a composable into a Canvas.")]),e("li",null,[o("Add this "),e("a",ae,[o("Kotlin file"),l(t)]),o(" which defines a default theme for the App")]),e("li",null,[o("The main Kotlin file has "),e("a",re,[o("the following code"),l(t)])])])]),ie]),de,e("p",null,[o("The final project is "),e("a",ce,[o("available here"),l(t)]),o(" in the "),he,o(" module.")]),pe,ue,me,e("ul",null,[e("li",null,[e("a",fe,[o("Full Stack JVM & JS App Hands-On Lab"),l(t)])]),e("li",null,[e("a",_e,[o("Build a full-stack web app with Kotlin Multiplatform"),l(t)])]),e("li",null,[e("a",ge,[o("Build a web application with React and Kotlin/JS ‚Äî tutorial"),l(t)])]),e("li",null,[e("a",be,[o("JetBrains/skiko"),l(t)])]),e("li",null,[e("a",ke,[o("burnoo/DemoListApp"),l(t)])])])])}const Me=c(f,[["render",we],["__file","index.html.vue"]]);export{Me as default};
