import{_ as o,a as l,b as i,c as p,d as r,e as c}from"./compose-multiplaform-c85bc549.js";import{_ as u,M as d,p as h,q as m,R as n,t as e,N as a,a1 as t}from"./framework-5866ffd3.js";const k={},b=n("h1",{id:"frontend-development-25min",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#frontend-development-25min","aria-hidden":"true"},"#"),e(" Frontend development (25min)")],-1),f=n("p",null,"Kotlin supports a wide selection of frontend frameworks across all platforms: mobile, desktop and web.",-1),g=n("p",null,"Please find below a glimpse of the possibilities that you can do right from IntelliJ:",-1),_={href:"https://openjfx.io/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://tornadofx.io/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://www.jetbrains.com/lp/compose-mpp/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://ktor.io/docs/creating-interactive-website.html",target:"_blank",rel:"noopener noreferrer"},M={href:"https://freemarker.apache.org/",target:"_blank",rel:"noopener noreferrer"},K=n("li",null,"With KotlinJS, developers can create React, nodsjs, or vanilla JS Apps using Kotlin.",-1),x=n("li",null,"Kotlin WASM compiles into Web Assembly. It can complement KotlinJS for computation intensive tasks.",-1),S={href:"https://developer.android.com/jetpack/compose",target:"_blank",rel:"noopener noreferrer"},C=n("strong",null,"xml layouts",-1),W=n("p",null,[e("Kotlin supports cross platform frontend development thanks to "),n("strong",null,"KMP and KMM")],-1),A=n("h2",{id:"kmp-kmm",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#kmp-kmm","aria-hidden":"true"},"#"),e(" KMP & KMM")],-1),J=n("p",null,"KMP (Kotlin Multiplatform) and KMM (Kotlin Multiplatform Mobile) are the two Kotlin technologies that allow to share a single codebase across multiple targets.",-1),j={href:"https://blog.jetbrains.com/kotlin/2021/08/compose-multiplatform-goes-alpha/",target:"_blank",rel:"noopener noreferrer"},I=n("p",null,[n("img",{src:"https://kotlinlang.org/docs/images/kotlin-multiplatform.png",alt:"KMP",loading:"lazy"})],-1),T=n("p",null,"Many combinations of targets and use cases are possible:",-1),q={href:"https://kotlinlang.org/docs/multiplatform-full-stack-app.html",target:"_blank",rel:"noopener noreferrer"},P={href:"https://kotlinlang.org/docs/multiplatform-library.html",target:"_blank",rel:"noopener noreferrer"},D={href:"https://kotlinlang.org/lp/mobile/",target:"_blank",rel:"noopener noreferrer"},z=n("p",null,"KMM is based on KMP and focuses on helping mobile developers create Cross-Platform SDK for common code.",-1),O=n("p",null,[n("img",{src:"https://kotlinlang.org/lp/mobile/static/sdk-313e52f7d9d3b3e3e48471ef06e8e3aa.svg",alt:"KMM",loading:"lazy"})],-1),B=n("h2",{id:"kotlin-js-and-kotlin-wasm",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#kotlin-js-and-kotlin-wasm","aria-hidden":"true"},"#"),e(" Kotlin/JS and Kotlin/WASM")],-1),F=n("li",null,"Kotlin/JS can also target the web and even use web frameworks (such as react) in Kolitn.",-1),N=n("li",null,[e("Kotlin WASM is another possibility to target the web but this will generate WASM instead of pure JS code. "),n("ul",null,[n("li",null,"It can be used for example to develop computation intensive libraries.")])],-1),E={href:"https://wasi.dev/",target:"_blank",rel:"noopener noreferrer"},R=n("li",null,"Let's keep watching üòÑ.",-1),V=n("h3",{id:"pw-kotlin-wasm-web-app",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#pw-kotlin-wasm-web-app","aria-hidden":"true"},"#"),e(" PW: Kotlin/WASM web app")],-1),L=t("<li>Both Kotlin/WASM and Kotlin/JS wizards on IntelliJ work similarly. <ul><li>The IDE generates a Kotlin file that will compile later WASM and / or JS. Kotlin/JS generated only JS while Kotin/WASM generates both JS and WASM.</li><li>In both cases, the entry point of the generated code is a JS file called <strong>module_name.js</strong>.</li><li>The IDE also generates an <strong>index.html</strong> in the resources folder which loads the generated JS explained above (the one named <strong>module_name.js</strong>).</li><li>The task <code>wasmBrowserDevelopmentRun</code> or <code>jsWasmBrowserDevelopmentRun</code> will run a local server that hosts both the <strong>index.html</strong> files and the generated JS and WASM files.</li></ul></li>",1),H=n("strong",null,"kotlin.wasm.wizard",-1),U={href:"https://github.com/worldline/learning-kotlin/tree/main/material/kotlin-wasm-starter",target:"_blank",rel:"noopener noreferrer"},G=t('<p><img src="'+l+'" alt="" loading="lazy"></p><ul><li>Check that kotlin is set to at least <strong>1.8.20</strong> in <strong>build.gradle.kts</strong> (the wizard may set it to a previous version).</li><li>Open <strong>src/wasmMain/kotlin/sample.kt</strong> and click on the run button that appears next to the <code>main</code> function.</li><li>If the build fails because the IDE used the wrong gradle task (the one that corresponds to a KotlinJS project), please change it to <code>wasmBrowserDevelopmentRun</code> and try to run again.</li></ul><p><img src="'+i+'" alt="" loading="lazy"><img src="'+p+'" alt="" loading="lazy"></p>',3),X={href:"http://localhost:8080/",target:"_blank",rel:"noopener noreferrer"},Y=n("li",null,"‚ö†Ô∏è You may need to activate some flags on your browser for the app to work. If you see a blank page, please read the browser logs to check for the instructions.",-1),$=n("p",null,[n("img",{src:o,alt:"",loading:"lazy"})],-1),Q=n("li",null,[e("The generated wasm file is available in "),n("strong",null,"build/js/packages/project_name/kotlin")],-1),Z={href:"https://github.com/WebAssembly/wabt",target:"_blank",rel:"noopener noreferrer"},nn=n("em",null,"wasm2wattool",-1),en=n("code",null,"wasm2wat --enable-all -v .\\kotlin-wasm-demo-wasm.wasm -o wasm.wat",-1),sn={href:"https://webassembly.github.io/wabt/demo/wasm2wat/",target:"_blank",rel:"noopener noreferrer"},an=n("li",null,"‚ùó However, I couldn't get it to work",-1),tn=n("h3",{id:"pw-kotlinjs-web-app",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#pw-kotlinjs-web-app","aria-hidden":"true"},"#"),e(" PW: KotlinJS web app")],-1),on=n("p",null,"The Kotlin/JS wizard creates a very similar app to the Kotlin/WASM. in a later PW, we'll create a fullstack app with Ktor and Kotlin/JS.",-1),ln=n("h2",{id:"compose",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#compose","aria-hidden":"true"},"#"),e(" Compose")],-1),pn={href:"https://blog.jetbrains.com/kotlin/2021/08/compose-multiplatform-goes-alpha/",target:"_blank",rel:"noopener noreferrer"},rn={class:"custom-container warning"},cn=n("p",{class:"custom-container-title"},"Compose multiplatform vs Jetpack Compose",-1),un={href:"https://developer.android.com/jetpack/compose/tutorial",target:"_blank",rel:"noopener noreferrer"},dn=t(`<div class="custom-container tip"><p class="custom-container-title">Compose Web vs Compose for Web Canvas</p><ul><li>Compose Web&#39;s API surface is different that other Compose targets because it works directly with the DOM.</li><li>Compose for Web Canvas has the same API surface as the Desktop and Android because it draws on a Canvas and does not manipulate on the DOM.</li></ul><p>This means that the first one has better web support and the second one has more reusable code.</p></div><h3 id="pw-compose-web" tabindex="-1"><a class="header-anchor" href="#pw-compose-web" aria-hidden="true">#</a> PW: Compose web</h3><ul><li>Create a new IntelliJ project -&gt; Compose Multiplaform.</li><li>Choose &quot;Single platform&quot; -&gt; &quot;Web&quot; and fill the other fields.</li><li>Choose <strong>Finish</strong></li><li>IntelliJ may take some time to prepare the project and may request to install additional plugins.</li><li>Launch the development server of the web app sing this command <code> ./gradlew jsBrowserRun --continuous</code>.</li><li>Modify <code>Main.kt</code> as follows and run the app.</li><li>Open this address: <code>localhost:8080</code>.</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">renderComposable</span><span class="token punctuation">(</span>rootElementId <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;root&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">Div</span><span class="token punctuation">(</span><span class="token punctuation">{</span> style <span class="token punctuation">{</span> <span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">.</span>px<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> expanded <span class="token keyword">by</span> remember <span class="token punctuation">{</span> <span class="token function">mutableStateOf</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
            <span class="token function">Button</span><span class="token punctuation">(</span>
                attrs <span class="token operator">=</span> <span class="token punctuation">{</span>
                    onClick <span class="token punctuation">{</span> expanded <span class="token operator">=</span> <span class="token operator">!</span>expanded <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Click me&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
            <span class="token function">Div</span><span class="token punctuation">(</span><span class="token punctuation">{</span> style <span class="token punctuation">{</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token punctuation">(</span>expanded<span class="token punctuation">)</span> DisplayStyle<span class="token punctuation">.</span>Block <span class="token keyword">else</span> DisplayStyle<span class="token punctuation">.</span>None<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Click me !&quot;</span></span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+r+`" alt="compose multiplatform demo" loading="lazy"></p><h3 id="pw-compose-desktop-android-app" tabindex="-1"><a class="header-anchor" href="#pw-compose-desktop-android-app" aria-hidden="true">#</a> PW: Compose desktop + Android app</h3><ul><li>Create a new project on IntelliJ -&gt; Compose Multiplatform.</li><li>Choose &quot;multiple platforms&quot; and fill the other fields. Then choose <strong>Finish</strong>.</li><li>IntelliJ starts preparing the project and may request to install plugins.</li><li>Once ready, run the android app using the green run button.</li><li>Run the Desktop app by running the main function on the desktop project (should be in <code>Main.kt</code>).</li><li>Modify <code>App.kt</code> in the main project as follows and run the app.</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Composable</span>
<span class="token keyword">fun</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> platformName <span class="token operator">=</span> <span class="token function">getPlatformName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    Card <span class="token punctuation">{</span>
        <span class="token keyword">var</span> expanded <span class="token keyword">by</span> remember <span class="token punctuation">{</span> <span class="token function">mutableStateOf</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
        <span class="token function">Column</span><span class="token punctuation">(</span>Modifier<span class="token punctuation">.</span><span class="token function">clickable</span> <span class="token punctuation">{</span> expanded <span class="token operator">=</span> <span class="token operator">!</span>expanded <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">Text</span><span class="token punctuation">(</span>
                text<span class="token operator">=</span><span class="token string-literal singleline"><span class="token string">&quot;Click me !&quot;</span></span><span class="token punctuation">,</span>
                style <span class="token operator">=</span> MaterialTheme<span class="token punctuation">.</span>typography<span class="token punctuation">.</span>h2
            <span class="token punctuation">)</span>
            <span class="token function">AnimatedVisibility</span><span class="token punctuation">(</span>expanded<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token function">Text</span><span class="token punctuation">(</span>
                    text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">platformName</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> üéä&quot;</span></span><span class="token punctuation">,</span>
                    style <span class="token operator">=</span> MaterialTheme<span class="token punctuation">.</span>typography<span class="token punctuation">.</span>h1
                <span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+c+'" alt="compose multiplatform demo" loading="lazy"></p><h2 id="further-reading" tabindex="-1"><a class="header-anchor" href="#further-reading" aria-hidden="true">#</a> Further reading</h2>',10),hn={href:"https://seb.deleuze.fr/the-huge-potential-of-kotlin-wasm/",target:"_blank",rel:"noopener noreferrer"};function mn(kn,bn){const s=d("ExternalLinkIcon");return h(),m("div",null,[b,f,g,n("ul",null,[n("li",null,[e("On the desktop side "),n("ul",null,[n("li",null,[e("Thanks to JVM support, Kotlin supports "),n("a",_,[e("JavaFX"),a(s)]),e(". "),n("ul",null,[n("li",null,[e("üí° There is even a Kotlin counterpart called "),n("a",v,[e("tornadofx"),a(s)]),e(".")])])]),n("li",null,[n("a",w,[e("Compose Multiplatform"),a(s)]),e(" brings Jetpack Compose to the desktop, the web and mobile.")])])]),n("li",null,[e("On the web "),n("ul",null,[n("li",null,[n("a",y,[e("Ktor"),a(s)]),e(" can use templates engines "),n("a",M,[e("such as FreeMarker"),a(s)]),e(" to create server pages.")]),K,x])]),n("li",null,[e("On mobiles "),n("ul",null,[n("li",null,[e("Android developers use the "),n("a",S,[e("Jetpack Compose"),a(s)]),e(" UI Framework or the legacy "),C,e(". It is experimental on iOS.")])])])]),W,A,J,n("p",null,[n("a",j,[e("KMP"),a(s)]),e(" relies on Kotlin native and other Kotlin features to help developers create projects that target multiple platforms using a common Kotlin code-base.")]),I,T,n("ul",null,[n("li",null,[n("a",q,[e("Full-Stack web apps"),a(s)]),e(": A project that contains a backend and a web app while sharing common logic.")]),n("li",null,[n("a",P,[e("Multiplatform libraries"),a(s)])]),n("li",null,[n("a",D,[e("KMM"),a(s)]),e(": a special denomination for KMP when used for iOS and Android projects.")])]),z,O,B,n("ul",null,[F,N,n("li",null,[e("Maybe we can do even more in the future with as all these technologies (Kotlin, WASM and Kotlin/WASM) evolve. - For example, "),n("a",E,[e("WASI"),a(s)]),e(" allows WASM to communicate with the operating system. - This means that me may see Kotlin/WASM project projects in the future that can target both the browser and the OS.")]),R]),V,n("ul",null,[L,n("li",null,[e("Let's create a Kotlin/WASM app. First, Enable the kotlin wasm wizard by enabling "),H,e(` in IntelliJ's registry (open the registry by double tapping shift and typing "registry" in the search box) or clone `),n("a",U,[e("this project"),a(s)]),e(".")])]),G,n("ul",null,[n("li",null,[e("The development server should start and you can open your WASM powered webapp on "),n("a",X,[e("http://localhost:8080/"),a(s)])]),Y]),$,n("ul",null,[Q,n("li",null,[e("WASM being a binary format, we need to convert it first to text format. "),n("ul",null,[n("li",null,[e("We can either install "),n("a",Z,[e("WABT (The WebAssembly Binary Toolkit or wabbit)"),a(s)]),e(" and use the "),nn,e(),en,e(",")]),n("li",null,[e("or use an online converter "),n("a",sn,[e("such as this one"),a(s)])]),an])])]),tn,on,ln,n("p",null,[n("a",pn,[e("Compose multiplatform"),a(s)]),e(" is a family of declarative UI frameworks for Android (Jetpack Compose), the desktop (Compose Desktop), and the web (Compose Web). It has experimental support for iOS and Web Canvas.")]),n("div",rn,[cn,n("p",null,[e("While very similar, Compose multiplatform is different from Jetpack Compose as the latter is only compatible with Android. Google provides a "),n("a",un,[e("JetPack compose tutorial"),a(s)]),e(" for Android development.")])]),dn,n("ul",null,[n("li",null,[n("a",hn,[e("The huge potential of Kotlin/Wasm"),a(s)])])])])}const _n=u(k,[["render",mn],["__file","index.html.vue"]]);export{_n as default};
