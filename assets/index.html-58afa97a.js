import{_ as r,a as l,b as a,c as s,d as n}from"./fs-kmp-webcanvas-architecture.drawio-2659deec.js";import{_ as u,M as c,p as d,q as p,R as e,N as i,t as o,a1 as m}from"./framework-5866ffd3.js";const g={},h=e("h1",{id:"application-multiplateforme-et-fullstack-codelab-60min",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#application-multiplateforme-et-fullstack-codelab-60min","aria-hidden":"true"},"#"),o(" Application multiplateforme et Fullstack Codelab (60min)")],-1),f=e("h2",{id:"tp-application-multiplateforme-kmm-kmp-pour-android-ios-et-ordinateur-de-bureau",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#tp-application-multiplateforme-kmm-kmp-pour-android-ios-et-ordinateur-de-bureau","aria-hidden":"true"},"#"),o(" TP : Application multiplateforme + KMM + KMP pour Android, iOS et ordinateur de bureau")],-1),b=e("p",null,"En combinant KMP, KMM et Compose, il est possible de d√©velopper des applications mobiles et de bureau multiplateformes en utilisant uniquement Kotlin.",-1),v={href:"https://worldline.github.io/learning-kotlin-multiplatform/",target:"_blank",rel:"noopener noreferrer"},k=e("img",{src:r,alt:"kmp codelab",loading:"lazy"},null,-1),_={href:"https://worldline.github.io/learning-kotlin-multiplatform/",target:"_blank",rel:"noopener noreferrer"},q=m('<h2 id="pw-ajouter-une-application-serveur-ktor" tabindex="-1"><a class="header-anchor" href="#pw-ajouter-une-application-serveur-ktor" aria-hidden="true">#</a> PW : Ajouter une application serveur Ktor</h2><p>Nous allons √©tendre l&#39;application pr√©c√©dente avec un serveur Ktor et un client web React. Le projet aura l&#39;architecture suivante (‚ùó Ce choix d&#39;architecture peut √™tre sujet √† discussion, mais nous nous en tiendrons √† cela pour l&#39;instant)</p><p><img src="'+l+'" alt="architecture" loading="lazy"></p><ul><li>Ajouter un module dans le projet appel√© <strong>sharedFullStack</strong> qui contiendra : <ul><li>Dans <em>commonMain</em> : Du code partag√© qui sera utilis√© par le projet <strong>shared</strong>.</li><li>Dans <em>jvmMain</em> : Un serveur Ktor qui sert une API Rest pour fournir les <em>questions</em> et h√©berge quelques fichiers HTML. L&#39;un des fichiers HTML chargera une application react qui sera d√©velopp√©e en Kotlin/JS.</li><li>Dans <em>jsMain</em> : Un client web react. Cette cible ne g√©n√©rera que le code JS, la page HTML qui le charge sera fournie par le serveur Ktor comme expliqu√© plus haut.</li><li>üí° Avec IntelliJ vous pouvez faire un clic droit sur les dossiers <strong>xxxMain/kotlin</strong> et <strong>xxxMain/resources</strong> et utiliser <strong>Mark Directory as</strong> pour obtenir plus de support de la part de l&#39;IDE.</li></ul></li><li>Mettez √† jour le fichier de construction de ce nouveau module comme suit : <ul><li>plugins : <code>multiplatform</code>, <code>serialilzation</code> et <code>application</code>. Ce dernier sera utilis√© pour sp√©cifier le fichier principal du serveur qui sera ex√©cut√© avec la t√¢che <code>run</code>.</li><li>Ajoutez le plugin <code>kotlin(&quot;multiplatform&quot;)</code> et ciblez toutes les plateformes possibles (web, desktop, jvm et mobile) pour √™tre complet.</li><li>Les d√©pendances devraient √™tre les suivantes : <ul><li><em>commonMain</em> : client kotr (puisque nous voulons ajouter le client API dans le code partag√©)</li><li><em>jvmMain</em> : serveur ktor + s√©rialisation json + cors (pour que le html puisse charger le JS)</li><li><em>jsMain</em> : Kotlin React</li></ul></li><li>Nous devons ajouter deux t√¢ches, la premi√®re produit l&#39;application JS React et l&#39;autre copie dans les ressources du serveur Ktor.</li><li>D√©finir la classe principale du plugin <code>application</code>.</li><li>Le fichier devrait [ressembler √† ce qui suit] (https://github.com/worldline/learning-kotlin/blob/main/material/kmm-fullstack-demo/sharedFullStack/build.gradle.kts)</li></ul></li><li>D√©placer le mod√®le API et les fichiers clients de <strong>shared</strong> vers <strong>sharedFullStack</strong> (<code>Anwser</code>, <code>Quiz</code>, <code>Question</code>, <code>QuizAPI</code> et <code>QuizRepository</code>)</li><li>‚ö†Ô∏è Quelques points √† noter : <ul><li>Dans le fichier de construction d&#39;android, ajoutez <strong>io.netty.versions.properties</strong> et <strong>INDEX.LIST</strong> au fichier de construction d&#39;android.</li><li>Notre t√¢che globale de nettoyage peut entrer en conflit avec celle de Kotlin/JS, si c&#39;est le cas, nous pouvons corriger cela en renommant notre t√¢che de nettoyage dans la racine <strong>build.gradle.kts</strong> packagingOptions exclues.</li></ul></li><li>Ecrivez le code n√©cessaire pour le serveur et le client. Le serveur doit fournir ces points de terminaison : <ul><li>Un GET sur <code>/</code> fournit un fichier html qui charge <strong>sharedFullStack.js</strong> parce que c&#39;est le nom du JS qui est g√©n√©r√©.</li><li>Un GET sur <code>/quiz</code> fournit un JSON de <code>Quiz</code> g√©n√©r√© par le serveur</li><li>Un GET sur <code>/quiz.html</code> sert une page HTML g√©n√©r√©e par le serveur en utilisant le HTML DSL.</li></ul></li><li>Changez la classe <code>QuizAPI</code> pour qu&#39;elle appelle notre serveur local <em>http://localhost:8081/quiz</em> et supprimez les arguments de la m√©thode json ci-dessus puisque le serveur met en place les bons headers.</li><li>Lancer la t√¢che gradle &quot;application -&gt; run&quot; du module <strong>sharedFullStack</strong>, qui copiera le JS g√©n√©r√© dans le dossier ressources du serveur Ktor.</li><li>Ouvrez <em>http://localhost:8081</em> pour ex√©cuter l&#39;application react</li></ul><p><img src="'+a+'" alt="kmm-fs-react-demo" loading="lazy"></p><ul><li>Ex√©cutez l&#39;application de bureau qui r√©cup√®re le quiz sur le serveur local.</li></ul><p><img src="'+s+'" alt="" loading="lazy"></p><ul><li>Le test sur mobile est un peu plus complexe parce que localhost peut √™tre mapp√© √† une autre adresse et que le HTTP non s√©curis√© est bloqu√© par d√©faut.</li></ul><p>Le projet final est [disponible ici] (https://github.com/worldline/learning-kotlin/tree/main/material/kmm-fullstack-demo) dans le module <strong>sharedFullStack</strong>.</p><h2 id="pw-ajouter-une-cible-compose-for-web-canvas-experimental" tabindex="-1"><a class="header-anchor" href="#pw-ajouter-une-cible-compose-for-web-canvas-experimental" aria-hidden="true">#</a> PW : Ajouter une cible Compose for Web Canvas (exp√©rimental)</h2><p>Compose for Web Canvas permet d&#39;utiliser la m√™me surface d&#39;API que Compose Desktop et Android. Ajoutons un autre module pour l&#39;exp√©rimenter.</p><p><img src="'+n+'" alt="architecture web canvas" loading="lazy"></p><ul><li>Dans la racine <strong>settings.gradle.kts</strong>, ajoutez ce d√©p√¥t maven <code>maven(&quot;https://maven.pkg.jetbrains.space/public/p/compose/dev&quot;)</code> qui a les d√©pendances de Compose for Web Canvas.</li><li>Dans <strong>gradle.properties</strong>, ajoutez cette ligne <code>org.jetbrains.compose.experimental.jscanvas.enabled=true</code>.</li><li>Dans le fichier de construction du module <strong>shared</strong>, ajoutez une cible <code>js(IR) { browser() }</code> et un sourceSet <strong>jsMain</strong> avec ces d√©pendances : <code>compose.web.core</code>, <code>compose.ui</code> et <code>compose.material3</code>. <ul><li>Impl√©mentez le fichier <code>Platform</code> et fournissez un composable pour l&#39; <code>App</code>. Voici un [exemple d&#39;impl√©mentation] (https://github.com/worldline/learning-kotlin/tree/main/material/kmm-fullstack-demo/shared/src/jsMain/kotlin/com/devoxxfr2023/km)</li></ul></li><li>Ajoutez un module nomm√© <strong>composeWebCanvasApp</strong> et d√©finissez</li></ul>',13);function j(x,z){const t=c("ExternalLinkIcon");return d(),p("div",null,[h,f,b,e("p",null,[e("a",v,[k,i(t)])]),e("p",null,[o("Ce labo √† un codelab d√©di√© "),e("a",_,[o("qui accessible depuis ce lien"),i(t)])]),q])}const S=u(g,[["render",j],["__file","index.html.vue"]]);export{S as default};
