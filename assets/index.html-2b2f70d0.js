import{_ as c,M as o,p as u,q as r,R as n,t as s,N as e,V as i,a1 as t}from"./framework-5866ffd3.js";const d={},k=n("h1",{id:"developpement-du-backend-45-min",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#developpement-du-backend-45-min","aria-hidden":"true"},"#"),s(" Développement du backend (45 min)")],-1),v={href:"https://spring.io/blog/2017/01/04/introducing-kotlin-support-in-spring-framework-5-0",target:"_blank",rel:"noopener noreferrer"},m={href:"https://quarkus.io/guides/kotlin",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/ktorio/ktor",target:"_blank",rel:"noopener noreferrer"},b={href:"https://kotlinlang.org/docs/server-overview.html#deploying-kotlin-server-side-applications",target:"_blank",rel:"noopener noreferrer"},h=n("p",null,"En outre, Kotlin est théoriquement compatible avec tout framework qui cible la JVM ou JS. Cependant, les frameworks qui ne supportent pas officiellement Kotlin peuvent nécessiter quelques ajustements pour l'utiliser.",-1),f=n("h2",{id:"ktor",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ktor","aria-hidden":"true"},"#"),s(" Ktor")],-1),_=n("p",null,"Ktor est une bibliothèque Kotlin multiplateforme permettant de développer des clients et des serveurs HTTP. Cela fait de Ktor une bibliothèque utile à la fois aux développeurs frontend, pour la partie client HTTP, ainsi qu'aux développeurs backend, pour la partie serveur HTTP. Dans ce qui suit, nous allons créer une API REST avec le serveur Ktor.",-1),q=n("h3",{id:"tp-developper-une-api-avec-ktor",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#tp-developper-une-api-avec-ktor","aria-hidden":"true"},"#"),s(" TP : développer une API avec Ktor")],-1),y={href:"https://start.ktor.io/",target:"_blank",rel:"noopener noreferrer"},x=t("<li>Cliquez sur &quot;Generate project&quot;.</li><li>Téléchargez l&#39;archive, décompressez-la et ouvrez le projet avec votre IDE préféré.</li><li>Créez un package <code>models</code> et ajoutez-y une classe de données <code>Customer</code> avec ces propriétés immuables <code>id : String, firstName : String, lastName : Chaîne, email : Chaîne</code>.</li><li>Annotez la classe avec <code>@Serializable</code>.</li><li>Créez un nouveau package nommé <code>routes</code> et ajoutez-y un fichier <code>CustomerRoutes.kt</code> qui contiendra le code pour l&#39;endpoint <code>/customer</code>.</li><li>Le code ci-dessous fournit l&#39;implémentation de certains endpoints. Veuillez implémenter les autres.</li><li>Pour activer la route, appelez <code>customerRouting()</code> dans le fichier de configuration du routage situé dans <code>plugins/Routing.kt</code>.</li><li>Pour plus de simplicité, utilisez une liste globale de clients en mémoire <code>val customerStorage = mutableListOf&lt;Customer&gt;()</code>.</li><li>Lancer le serveur en exécutant la méthode main.</li><li>Tester l&#39;API sur l&#39;IDE en utilisant un fichier http ou en utilisant n&#39;importe quel autre client.</li>",10),S=t(`<details class="custom-container details"><summary>CustomerRoutes.kt</summary><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> store <span class="token operator">=</span> mutableListOf<span class="token operator">&lt;</span>Customer<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">fun</span> Route<span class="token punctuation">.</span><span class="token function">customerRouting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">route</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;/customer&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">get</span> <span class="token punctuation">{</span>
      call<span class="token punctuation">.</span><span class="token function">respond</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;{id?}&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">val</span> id <span class="token operator">=</span> call<span class="token punctuation">.</span>parameters<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">&quot;id&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token operator">:</span> <span class="token keyword">return</span>@<span class="token keyword">get</span> call<span class="token punctuation">.</span><span class="token function">respondText</span><span class="token punctuation">(</span>
        <span class="token string-literal singleline"><span class="token string">&quot;Missing id&quot;</span></span><span class="token punctuation">,</span>
        status <span class="token operator">=</span> HttpStatusCode<span class="token punctuation">.</span>BadRequest
      <span class="token punctuation">)</span>
      <span class="token keyword">val</span> customer <span class="token operator">=</span>
        store<span class="token punctuation">.</span><span class="token function">find</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span>id <span class="token operator">==</span> id <span class="token punctuation">}</span> <span class="token operator">?</span> <span class="token operator">:</span> <span class="token keyword">return</span>@<span class="token keyword">get</span> call<span class="token punctuation">.</span><span class="token function">respondText</span><span class="token punctuation">(</span>
          <span class="token string-literal singleline"><span class="token string">&quot;Pas de client avec l&#39;id </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">id</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span>
          status <span class="token operator">=</span> HttpStatusCode<span class="token punctuation">.</span>NotFound
        <span class="token punctuation">)</span>
      call<span class="token punctuation">.</span><span class="token function">respond</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    post <span class="token punctuation">{</span>
      <span class="token keyword">val</span> customer <span class="token operator">=</span> call<span class="token punctuation">.</span>receive<span class="token operator">&lt;</span>Customer<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      store<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span>
      call<span class="token punctuation">.</span><span class="token function">respondText</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Customer stored correctly&quot;</span></span><span class="token punctuation">,</span> status <span class="token operator">=</span> HttpStatusCode<span class="token punctuation">.</span>Created<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">delete</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;{id?}&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// TODO</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="custom-container details"><summary>plugins/Routing.kt</summary><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> Application<span class="token punctuation">.</span><span class="token function">configureRouting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    routing <span class="token punctuation">{</span>
        <span class="token function">customerRouting</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,2),C={class:"custom-container tip"},w=t(`<p class="custom-container-title">return@label</p><p>Vous pouvez spécifier le niveau que vous voulez retourner avec un label explicite en utilisant <code>return@lambda</code>.</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>lambdaA <span class="token punctuation">{</span>
    lambdaB <span class="token punctuation">{</span>
        lambdaC <span class="token punctuation">{</span>
            <span class="token keyword">val</span> randomInt <span class="token operator">=</span> Random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>randomInt <span class="token operator">&gt;</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token label symbol">@lambdaC</span> <span class="token keyword">else</span> <span class="token keyword">return</span><span class="token label symbol">@lambdaB</span>
        <span class="token punctuation">}</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;In lambdaB&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),j={href:"https://play.kotlinlang.org/#eyJ2ZXJzaW9uIjoiMS43LjEwIiwicGxhdGZvcm0iOiJqYXZhIiwiYXJncyI6IiIsIm5vbmVNYXJrZXJzIjp0cnVlLCJ0aGVtZSI6ImlkZWEiLCJjb2RlIjoiaW1wb3J0IGtvdGxpbi5yYW5kb20uUmFuZG9tXG5cbi8vIHJldHVybiB3aXRoIGltcGxpY2l0IGxhYmVsc1xuXG5mdW4gbWFpbigpIHtcbiAgIHZhbCBrb3RsaW4gPSBcIvCfmYJcIlxuICAga290bGluLmxldCB7XG4gICAgICAgaXQuYXBwbHkge1xuXHRcdFx0dmFsIHJhbmRvbUludCA9IFJhbmRvbS5uZXh0SW50KDAsIDEwMClcbiAgICAgICAgICAgIHByaW50bG4ocmFuZG9tSW50KVxuICAgICAgICAgICAgaWYgKHJhbmRvbUludCA+IDUwKSByZXR1cm5AYXBwHkgZWxzZSByZXR1cm5AbGV0XG4gICAgICAgfVxuICAgICAgIHByaW50bG4oXCJpbnQgbV0IGFmdGVyIGFwcGx5XCIpXG4gICB9XG59In0=",target:"_blank",rel:"noopener noreferrer"},I=t(`<details class="custom-container details"><summary>CustomerTest.http</summary><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code>POST http://127.0.0.1:8080/customer
Content-Type : application/json

{
  &quot;id&quot; : &quot;100&quot;,
  &quot;firstName&quot; : &quot;Jane&quot;,
  &quot;lastName&quot; : &quot;Smith&quot;,
  &quot;email&quot; : &quot;jane.smith@company.com&quot;
}


###
POST http://127.0.0.1:8080/customer
Content-Type : application/json

{
  &quot;id&quot; : &quot;200&quot;,
  &quot;firstName&quot; : &quot;John&quot;,
  &quot;lastName&quot; : &quot;Smith&quot;,
  &quot;email&quot; : &quot;john.smith@company.com&quot;
}

###
POST http://127.0.0.1:8080/customer
Content-Type : application/json

{
  &quot;id&quot; : &quot;300&quot;,
  &quot;firstName&quot; : &quot;Mary&quot;,
  &quot;lastName&quot; : &quot;Smith&quot;,
  &quot;email&quot; : &quot;mary.smith@company.com&quot;
}


###
GET http://127.0.0.1:8080/customer
Accept : application/json

###
GET http://127.0.0.1:8080/customer/200
Accepte : application/json

###
GET http://127.0.0.1:8080/customer/500
Accepte : application/json

###
DELETE http://127.0.0.1:8080/customer/100

###
DELETE http://127.0.0.1:8080/customer/500
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,1),P={href:"https://ktor.io/docs/creating-http-apis.html",target:"_blank",rel:"noopener noreferrer"},T=n("h2",{id:"nodejs",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#nodejs","aria-hidden":"true"},"#"),s(" nodejs")],-1),A=n("p",null,"Grâce à Kotlin/JS, nous pouvons écrire des applications qui ciblent nodejs en utilisant Kotlin.",-1),R=n("strong",null,"déclaration externe",-1),E={href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.js/-js-module/",target:"_blank",rel:"noopener noreferrer"},z={href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.js/-js-non-module/",target:"_blank",rel:"noopener noreferrer"},G={href:"https://github.com/Kotlin/dukat",target:"_blank",rel:"noopener noreferrer"},D=n("p",null,"Heureusement pour nous, le prochain TP utilise la librairie Express pour laquelle nous pouvons trouver une déclaration de type externe.",-1),K=n("h3",{id:"tp-api-rest-avec-kotlin-js-et-express",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#tp-api-rest-avec-kotlin-js-et-express","aria-hidden":"true"},"#"),s(" TP : API Rest avec Kotlin/JS et Express")],-1),B=n("li",null,"Dans IntelliJ, créer un nouveau projet nodejs",-1),J=n("strong",null,"build.gradle.ts",-1),L=n("li",null,[s("Mettre la dernière version de Kotlin dans la ligne contenant "),n("code",null,'kotlin("js")'),s(".")],-1),V={href:"https://expressjs.com/",target:"_blank",rel:"noopener noreferrer"},M=n("strong",null,"Express",-1),O={href:"https://github.com/chrisnkrueger/kotlin-express",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"useCommonJs()",-1),H=n("code",null,"js",-1),X={href:"https://github.com/Kotlin/dukat/issues/106",target:"_blank",rel:"noopener noreferrer"},W={href:"https://github.com/chrisnkrueger/kotlin-express",target:"_blank",rel:"noopener noreferrer"},Z=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">implementation</span><span class="token punctuation">(</span><span class="token function">npm</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&gt; 4.0.0 &lt; 5.0.0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">&quot;dev.chriskrueger:kotlin-express:1.2.0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Modifiez <strong>main.kt</strong> comme suit. Cela crée un serveur API REST qui écoute le port 3000 et fournit une route <strong>GET /hello</strong>.</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Message</span><span class="token punctuation">(</span><span class="token keyword">val</span> id <span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">val</span> message <span class="token operator">:</span> String<span class="token punctuation">)</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> messages <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token function">Message</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;I love Kotlin/JS&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> app <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;/hello&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> req<span class="token punctuation">,</span> res <span class="token operator">-&gt;</span>
        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>messages<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;server start at port 3000&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),U=n("li",null,[s("Exécutez la tâche "),n("code",null,"nodeRun"),s(" depuis votre IDE ou depuis la ligne de commande (si vous avez installé Gradle). "),n("ul",null,[n("li",null,[s("Si vous rencontrez une erreur avec Yarn lock, exécutez la tâche "),n("code",null,"kotlinUpgradeYarnLock"),s(" puis réessayez.")])])],-1),Y=n("li",null,"Ajouter des routes en POST, PUT et DELETE",-1),F=n("code",null,"req.body",-1),Q=n("code",null,"undefined",-1),$=n("strong",null,"body parser",-1),nn=n("li",null,[s("Pour un corps en JSON, nous devons appeler "),n("code",null,"app.use(bodyParser.json())"),s(".")],-1),sn={href:"https://www.npmjs.com/package/body-parser",target:"_blank",rel:"noopener noreferrer"},en=n("strong",null,"bodyParser",-1),an={href:"https://github.com/chrisnkrueger/kotlin-express",target:"_blank",rel:"noopener noreferrer"},tn=n("strong",null,"bodyParser",-1),on={href:"https://www.npmjs.com/package/body-parser?activeTab=code",target:"_blank",rel:"noopener noreferrer"},ln={href:"https://github.com/worldline/learning-kotlin/blob/main/material/kotlin-nodejs-demo/src/main/kotlin/BodyParser.kt",target:"_blank",rel:"noopener noreferrer"},pn=n("h2",{id:"spring-framework",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#spring-framework","aria-hidden":"true"},"#"),s(" Spring framework")],-1),cn=n("p",null,"Spring est un framework célèbre pour le développement d'applications côté serveur : API REST, pages web générées par le serveur, microservices, etc. Il s'appuie sur l'écosystème Java pour la compilation et l'exécution, ce qui le rend compatible avec Kotlin. Mieux encore, Spring supporte officiellement Kotlin. On peut même démarrer un nouveau projet avec Kotlin et Gradle-Kotlin. Dans la prochaine section, nous utiliserons ce projet pour recréer notre API REST plus haut avec Spring.",-1),un=n("h3",{id:"tp-spring-boot-part-1-developper-la-meme-api-avec-spring-boot",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#tp-spring-boot-part-1-developper-la-meme-api-avec-spring-boot","aria-hidden":"true"},"#"),s(" TP : Spring boot part 1 - développer la même API avec Spring Boot")],-1),rn={href:"https://start.spring.io/",target:"_blank",rel:"noopener noreferrer"},dn=n("li",null,"Choisissez Kotlin comme langage et Kotlin-Grade comme gestionnaire de projet.",-1),kn=n("li",null,[s("Ajoutez les dépendances suivantes : "),n("strong",null,"Spring Web"),s(" et "),n("strong",null,"Spring Boot DevTools"),s(".")],-1),vn=n("strong",null,"Generate",-1),mn={href:"https://marketplace.visualstudio.com/search?term=kotlin&target=VSCode&category=All%20categories&sortBy=Relevance",target:"_blank",rel:"noopener noreferrer"},gn={href:"https://marketplace.visualstudio.com/items?itemName=Pivotal.vscode-boot-dev-pack",target:"_blank",rel:"noopener noreferrer"},bn=n("li",null,[s("Vérifiez que la partie plugins "),n("code",null,"build.gradle.kts"),s(" utilise la dernière version de Kotlin. Voici à quoi cela devrait ressembler avec Kotlin "),n("em",null,"1.8.10"),s(" :")],-1),hn=t(`<div class="language-kts line-numbers-mode" data-ext="kts"><pre class="language-kts"><code>plugins <span class="token punctuation">{</span>
  <span class="token function">id</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;org.springframework.boot&quot;</span></span><span class="token punctuation">)</span> version <span class="token string-literal singleline"><span class="token string">&quot;3.0.4&quot;</span></span>
  <span class="token function">id</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;io.spring.dependency-management&quot;</span></span><span class="token punctuation">)</span> version <span class="token string-literal singleline"><span class="token string">&quot;1.1.0&quot;</span></span>
  <span class="token function">kotlin</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;jvm&quot;</span></span><span class="token punctuation">)</span> version <span class="token string-literal singleline"><span class="token string">&quot;1.8.10&quot;</span></span>
  <span class="token function">kotlin</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;plugin.spring&quot;</span></span><span class="token punctuation">)</span> version <span class="token string-literal singleline"><span class="token string">&quot;1.8.10&quot;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),fn=t("<li>Créez la <code>data class Customer</code> dans le package <code>model</code> (sans l&#39;annotation <code>@Serializable</code>).</li><li>Créez un paquetage <code>controller</code> qui contient une classe <code>CustomerController</code> qui fournit un CRUD en utilisant une liste globale. <ul><li>Vous pouvez trouver un squelette ci-dessous.</li><li>💡 Dans Spring, les contrôleurs Rest servent de routes Ktor, où un contrôleur définit une ressource REST.</li></ul></li><li>Définissez les mêmes routes que dans le TP précédent.</li><li>Démarrez le serveur de l&#39;API REST en exécutant : <ul><li>Sur Powershell : <code>.\\gradlew.bat bootRun</code></li><li>Tout shell Unix : <code>.\\gradlew bootRun</code></li><li>Ou bien, vérifiez si votre IDE fournit déjà des configurations d&#39;exécution pour les projets Spring Boot.</li></ul></li>",4),_n=n("strong",null,"http",-1),qn={href:"https://github.com/worldline/learning-kotlin/blob/main/material/spring-boot-kt-api/customer.jetbrains.http",target:"_blank",rel:"noopener noreferrer"},yn={href:"https://github.com/worldline/learning-kotlin/blob/main/material/spring-boot-kt-api/customer.vscode-resclient.http",target:"_blank",rel:"noopener noreferrer"},xn=t(`<details class="custom-container details"><summary>CustomerController.kt</summary><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> store <span class="token operator">=</span> mutableListOf<span class="token operator">&lt;</span>Customer<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token annotation builtin">@RestController</span>
<span class="token annotation builtin">@RequestMapping</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;/customer&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">class</span> CustomerController <span class="token punctuation">{</span>
    <span class="token annotation builtin">@GetMapping</span>
    <span class="token keyword">fun</span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> store

    <span class="token annotation builtin">@GetMapping</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;{id}&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">fun</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token annotation builtin">@PathVariable</span> id <span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* TODO : implement */</span> <span class="token punctuation">}</span>

    <span class="token annotation builtin">@PostMapping</span>
    <span class="token keyword">fun</span> <span class="token function">addOne</span><span class="token punctuation">(</span><span class="token annotation builtin">@RequestBody</span> customer <span class="token operator">:</span> Customer<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* TODO : implement */</span> <span class="token punctuation">}</span>

    <span class="token annotation builtin">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;{id}&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">fun</span> <span class="token function">deleteOne</span><span class="token punctuation">(</span><span class="token annotation builtin">@PathVariable</span> id <span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* TODO : implement */</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="tp-spring-boot-partie-2-ajouter-une-base-de-donnees" tabindex="-1"><a class="header-anchor" href="#tp-spring-boot-partie-2-ajouter-une-base-de-donnees" aria-hidden="true">#</a> TP : Spring boot partie 2 - ajouter une base de données</h3><p>Allons un peu plus loin en stockant des données dans une base de données et en écrivant quelques tests.</p><p>Nous utiliserons la base de données en mémoire H2 pour des raisons de simplicité, puisqu&#39;elle ne nécessite pas de serveur pour fonctionner. Les classes seront mappées aux tables de la base de données avec des annotations JPA. L&#39;API de base de données que nous utiliserons s&#39;appelle <code>JPARepository</code>. C&#39;est une API légère qui fournit des fonctionnalités CRUD communes à partir d&#39;une simple une interface.</p>`,4),Sn={href:"https://start.spring.io/",target:"_blank",rel:"noopener noreferrer"},Cn=t("<li>Ouvrez le projet et ajoutez cette classe dans le package <code>model</code> <code>@Entity class Product(@Id @GeneratedValue var id : Long ? = null, var name : String, var price : Int)</code>. Ceci définit la classe ainsi que les annotations JPA minimales (<code>@Entity</code>, <code>@Id</code> et <code>@GeneratedValue</code>) pour générer la table correspondante.</li><li>Dans le package <code>repository</code>, déclarez l&#39;interface <code>ProductRepository</code> comme suit <code>interface ProductRepository : JpaRepository&lt;Produit, Long&gt;</code>. C&#39;est suffisant pour que Spring génère une implémentation avec des caractéristiques communes comme nous le verrons plus tard.</li><li>Ensuite, créez une classe <code>ProductService</code> qui contiendra la logique métier. En termes d&#39;architecture, le contrôleur appelle un service qui, à son tour, s&#39;appuie sur d&#39;autres services ou référentiels.</li>",3),wn=t(`<details class="custom-container details"><summary>ProductService.kt</summary><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Service</span>
<span class="token keyword">class</span> <span class="token function">ProductService</span><span class="token punctuation">(</span><span class="token annotation builtin">@Autowired</span> <span class="token keyword">val</span> productRepository<span class="token operator">:</span> ProductRepository<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">fun</span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> productRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">// use findByIdOrNull instad of findById because the latter returns an optional&lt;Product&gt; instead of Product?</span>
    <span class="token keyword">fun</span> <span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token operator">:</span> Long<span class="token punctuation">)</span> <span class="token operator">=</span> productRepository<span class="token punctuation">.</span><span class="token function">findByIdOrNull</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><ul><li>Dans le package controller, créez une classe <code>ProductController</code> qui est mappée à <code>/product</code> et injectée avec <code>@Autowired</code>. Répondez à <code>@Get</code> comme suit.</li></ul><details class="custom-container details"><summary>ProductController.kt</summary><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@RestController</span>
<span class="token annotation builtin">@RequestMapping</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;/product&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token function">ProductController</span><span class="token punctuation">(</span><span class="token annotation builtin">@Autowired</span> <span class="token keyword">val</span> productService <span class="token operator">:</span> ProductService<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation builtin">@GetMapping</span> <span class="token keyword">fun</span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> productService<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token annotation builtin">@GetMapping</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;{id}&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">fun</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token annotation builtin">@PathVariable</span> id <span class="token operator">:</span> Long<span class="token punctuation">)</span> <span class="token operator">=</span>
        productService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">:</span> <span class="token keyword">throw</span> <span class="token function">ResponseStatusException</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>NOT_FOUND<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><div class="custom-container tip"><p class="custom-container-title">Kotlin rend getById(@PathVariable id : Long) plus concis</p><p>L&#39;opérateur Elvis <code>?:</code> permet de simplifier le code. Voici une version plus longue en guise de référence.</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@GetMapping</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;{id}&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">fun</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token annotation builtin">@PathVariable</span> id <span class="token operator">:</span> Long<span class="token punctuation">)</span> <span class="token operator">:</span> Produit <span class="token punctuation">{</span>
    <span class="token keyword">val</span> product <span class="token operator">=</span> productService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>product <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> product
    <span class="token punctuation">}</span>
    <span class="token keyword">throw</span> <span class="token function">ResponseStatusException</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>NOT_FOUND<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>En outre, Spring fournit <code>@ControllerAdvice</code> pour modifier le message d&#39;exception. Vous pouvez voir un [exemple ici] (https://spring.io/guides/tutorials/rest/).</p></div><ul><li>Exécutons le projet. Avant de lancer le projet, nous devons ajouter un plugin qui permet aux classes Kotlin de générer un constructeur par défaut <code>id(&quot;org.jetbrains.kotlin.plugin.jpa&quot;) version &quot;1.8.10&quot;</code>. Les plugins devraient ressembler à ce qui suit :</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>plugins <span class="token punctuation">{</span>
  <span class="token function">id</span><span class="token punctuation">(</span><span class="token string">&quot;org.jetbrains.kotlin.plugin.jpa&quot;</span><span class="token punctuation">)</span> version <span class="token string">&quot;1.8.10&quot;</span>
  <span class="token function">id</span><span class="token punctuation">(</span><span class="token string">&quot;org.springframework.boot&quot;</span><span class="token punctuation">)</span> version <span class="token string">&quot;3.0.4&quot;</span>
  <span class="token function">id</span><span class="token punctuation">(</span><span class="token string">&quot;io.spring.dependency-management&quot;</span><span class="token punctuation">)</span> version <span class="token string">&quot;1.1.0&quot;</span>
  <span class="token function">kotlin</span><span class="token punctuation">(</span><span class="token string">&quot;jvm&quot;</span><span class="token punctuation">)</span> version <span class="token string">&quot;1.8.10&quot;</span>
  <span class="token function">kotlin</span><span class="token punctuation">(</span><span class="token string">&quot;plugin.spring&quot;</span><span class="token punctuation">)</span> version <span class="token string">&quot;1.8.10&quot;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>En guise d&#39;exercice, implémentez ces routes : POST d&#39;un seul produit, DELETE par id (<code>/produit/{id}</code>) et GET par id (<code>/produit/{id}</code>). <ul><li>Indice : <code>ProductController</code> fournit déjà les méthodes nécessaires.</li></ul></li><li>Appelez les différents points de terminaison avec un client REST.</li><li>Tester votre API Rest avec un client HTTP</li></ul><h3 id="tp-spring-boot-partie-3-ajouter-des-tests" tabindex="-1"><a class="header-anchor" href="#tp-spring-boot-partie-3-ajouter-des-tests" aria-hidden="true">#</a> TP : Spring boot partie 3 - ajouter des tests</h3><p>Les frameworks Spring permettent d&#39;effectuer différents types de tests en fournissant différentes classes dès le départ :</p><ul><li>Tests unitaires/de composants des services et de l&#39;API REST. Cela se fait par le biais d&#39;utilitaires de bouchonnage tels que <code>MockMVC</code>.</li><li>Tests d&#39;intégration de l&#39;API REST en utilisant <code>TestRestTemplate</code>. Dans ce cas, un serveur complet est exécuté et testé.</li></ul><p>La plupart des classes fournies par Spring, si ce n&#39;est toutes, offrent une syntaxe élégante pour les développeurs Java. Certaines d&#39;entre elles vont plus loin en tirant parti des caractéristiques spécifiques de Kotlin. Dans ce qui suit, nous allons nous concentrer sur les parties qui fournissent des DSLs Kotlin, à savoir le test unitaire de l&#39;API REST avec <code>MockMVC</code>.</p><ul><li>Créer une classe de test <code>ProductControllerUnitTests</code> avec le contenu initial ci-dessous. <code>MockMvc</code> permet de tester unitairement l&#39;API REST. L&#39;annotation <code>@AutoConfigureMockMvc</code> permet à Spring de la configurer automatiquement.</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@SpringBootTest</span>
<span class="token annotation builtin">@AutoConfigureMockMvc</span>
classe <span class="token function">ProductControllerTests</span><span class="token punctuation">(</span>
    <span class="token annotation builtin">@Autowired</span> <span class="token keyword">val</span> mockMvc <span class="token operator">:</span> MockMvc<span class="token punctuation">,</span>
    <span class="token annotation builtin">@Autowired</span> <span class="token keyword">val</span> productRepository <span class="token operator">:</span> ProductRepository<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token annotation builtin">@BeforeEach</span>
    <span class="token keyword">fun</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        productRepository<span class="token punctuation">.</span><span class="token function">deleteAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Ajoutez les deux tests ci-dessous. Le premier utilise une approche classique tandis que le second tire parti des capacités du DSL de Kotlin. De plus, nous utilisons une chaîne littérale plus lisible.</li></ul>`,14),jn=n("div",{class:"language-kotlin line-numbers-mode","data-ext":"kt"},[n("pre",{class:"language-kotlin"},[n("code",null,[n("span",{class:"token annotation builtin"},"@Test"),s(`
`),n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"testWithClassicApproach"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
    mockMvc`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"perform"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"/product"')]),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"andExpect"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"status"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),s("isOk"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"andExpect"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"content"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"string"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"containsString"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"[]"')]),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),In=n("div",{class:"language-kotlin line-numbers-mode","data-ext":"kt"},[n("pre",{class:"language-kotlin"},[n("code",null,[n("span",{class:"token annotation builtin"},"@Test"),s(`
`),n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"`test GET a single product`"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    mockMvc`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"/product/1"')]),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"andExpect"),s(),n("span",{class:"token punctuation"},"{"),s(`
        status `),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token function"},"isOk"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token function"},"jsonPath"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"$.name"')]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token function"},"value"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"A"')]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token function"},"jsonPath"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"$.price"')]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token function"},"value"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"}"),s(`
        content `),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token function"},"contentType"),n("span",{class:"token punctuation"},"("),s("MediaType"),n("span",{class:"token punctuation"},"."),s("APPLICATION_JSON"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Pn=t(`<ul><li>En guise d&#39;exercice, écrire des tests pour les autres points d&#39;accès.</li></ul><div class="custom-container tip"><p class="custom-container-title">Le constructeur de requêtes de JpaRepository</p><p>Les <strong>repository</strong> Spring implémentent des requêtes basées sur le nom de leurs méthodes. Par exemple, pour obtenir tous les produits triés par nom, nous pouvons ajouter cette méthode à l&#39;interface.</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">interface</span> ProductRepository <span class="token operator">:</span> JpaRepository<span class="token operator">&lt;</span>Produit<span class="token punctuation">,</span> Long<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">fun</span> <span class="token function">findAllByOrderByNameAsc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> List<span class="token operator">&lt;</span>Produit<span class="token operator">&gt;</span> <span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>La [documentation officielle] (https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.query-methods.query-creation) fournit des explications et des exemples plus détaillés.</p></div><h3 id="projets-termines" tabindex="-1"><a class="header-anchor" href="#projets-termines" aria-hidden="true">#</a> Projets terminés</h3>`,3),Tn={href:"https://github.com/worldline/learning-kotlin/tree/master/material/ktor-api",target:"_blank",rel:"noopener noreferrer"},An={href:"https://github.com/worldline/learning-kotlin/tree/master/material/kotlin-nodejs-demo",target:"_blank",rel:"noopener noreferrer"},Rn={href:"https://github.com/worldline/learning-kotlin/tree/master/material/spring-boot-kt-api",target:"_blank",rel:"noopener noreferrer"},En=n("h2",{id:"aller-plus-loin",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#aller-plus-loin","aria-hidden":"true"},"#"),s(" Aller plus loin")],-1),zn=n("p",null,"Ces tutoriels officiels vont encore plus loin :",-1),Gn={href:"https://kotlinlang.org/docs/jvm-spring-boot-restful.html",target:"_blank",rel:"noopener noreferrer"},Dn={href:"https://spring.io/guides/tutorials/spring-boot-kotlin/",target:"_blank",rel:"noopener noreferrer"},Kn={href:"https://spring.io/guides/tutorials/rest/",target:"_blank",rel:"noopener noreferrer"},Bn={href:"https://quarkus.io/guides/kotlin",target:"_blank",rel:"noopener noreferrer"},Jn=n("h2",{id:"lien-et-references",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#lien-et-references","aria-hidden":"true"},"#"),s(" Lien et références")],-1),Ln={href:"https://dev.to/mpetuska/js-in-kotlinjs-c4g",target:"_blank",rel:"noopener noreferrer"},Vn={href:"https://www.baeldung.com/kotlin/mockmvc-kotlin-dsl",target:"_blank",rel:"noopener noreferrer"},Mn={href:"https://spring.io/guides/tutorials/spring-boot-kotlin/",target:"_blank",rel:"noopener noreferrer"},On={href:"https://www.baeldung.com/kotlin/jpa",target:"_blank",rel:"noopener noreferrer"},Nn={href:"https://stackoverflow.com/questions/47143127/spring-data-jpa-how-to-use-kotlin-nulls-instead-of-optional",target:"_blank",rel:"noopener noreferrer"};function Hn(Xn,Wn){const a=o("ExternalLinkIcon"),l=o("CodeGroupItem"),p=o("CodeGroup");return u(),r("div",null,[k,n("p",null,[s("De nombreux frameworks supportent officiellement Kotlin comme "),n("a",v,[s("Spring"),e(a)]),s(", "),n("a",m,[s("Quarkus"),e(a)]),s(" et "),n("a",g,[s("Ktor"),e(a)]),s(", parmi d'autres "),n("a",b,[s("listés ici"),e(a)]),s(".")]),h,f,_,q,n("ul",null,[n("li",null,[s("Créez un projet sur "),n("a",y,[s("start.ktor.io"),e(a)]),s(" avec les plugins suivants : ContentNegotiation, kotlinx.serialization, et Routing.")]),x]),S,n("div",C,[w,n("p",null,[n("a",j,[s("Ce code exécute un autre exemple"),e(a)]),s(".")])]),I,n("p",null,[n("a",P,[s("Cette page contient des étapes détaillées"),e(a)])]),T,A,n("p",null,[s("On peut même importer des librairies npm à condition de déclarer les API JS que l'on va utiliser en Kotlin. C'est ce qu'on appelle une "),R,s(" (vous pouvez la considérer comme un équivalent des définitions de type de TypeScript) qui déclare les symboles auxquels nous voulons accéder en Kotlin grâce aux annotations "),n("a",E,[s("@JsModule"),e(a)]),s(" et "),n("a",z,[s("@JsNonModule"),e(a)]),s(". Définir de telles déclarations externes peut s'avérer fastidieux et il ne semble pas y avoir de générateur automatique officiel et stable ("),n("a",G,[s("dukat"),e(a)]),s(" a été supprimé dans kotlin 1.8.20). Dans ce cas, nous avons deux options, soit écrire la déclaration externe nous-même, soit l'importer en tant que dépendance si elle est disponible.")]),D,K,n("ul",null,[B,n("li",null,[s("Une fois le projet chargé, éditer "),J,s(" comme suit : "),n("ul",null,[L,n("li",null,[s("Ajoutez ces deux dépendances: "),n("ul",null,[n("li",null,[s("La première est la bibliothèque "),n("a",V,[M,e(a)]),s(",")]),n("li",null,[s("et la seconde est la définition externe fournie par "),n("a",O,[s("chrisnkrueger/kotlin-express"),e(a)]),s(".")])])]),n("li",null,[s("ajouter une ligne "),N,s(" à l'intérieur du bloc "),H,s(". Ceci "),n("a",X,[s("est nécessaire"),e(a)]),s(" pour pouvoir utiliser "),n("a",W,[s("chrisnkrueger/ kotlin-express"),e(a)]),s(" dans notre code.")])])])]),Z,n("ul",null,[U,Y,n("li",null,[s("En ce qui concerne le corps du POST, Express positionne "),F,s(" à "),Q,s(" à moins que nous ne spécifions un "),$,s(". "),n("ul",null,[nn,n("li",null,[n("a",sn,[en,e(a)]),s(" est une bibliothèque npm et malheureusement, "),n("a",an,[s("chrisnkrueger/kotlin-express"),e(a)]),s(" ne fournit pas de définition externe pour "),tn,s(" au moment de l'écriture de ces lignes (chrisnkrueger/kotlin-express en version 1.2.0).")]),n("li",null,[s("Pouvez-vous essayer de la définir vous-même en lisant le "),n("a",on,[s("code de la bibliothèque"),e(a)]),s(" ?")]),n("li",null,[s("Vous pouvez trouver une solution "),n("a",ln,[s("ici"),e(a)])])])])]),pn,cn,un,n("ul",null,[n("li",null,[s("Créez un projet sur "),n("a",rn,[s("start.spring.io (aussi appelé Spring initializr)"),e(a)]),s(" avec les dépendances suivantes : Spring Web et Spring Boot DevTools.")]),dn,kn,n("li",null,[s("Cliquez sur "),vn,s(". Téléchargez l'archive, décompressez-la et ouvrez le projet avec IntelliJ (de préférence) ou VSCode. "),n("ul",null,[n("li",null,[s("Pour VSCode, installez une "),n("a",mn,[s("extension Kotlin"),e(a)]),s(" et "),n("a",gn,[s("Spring Boot Extension Pack"),e(a)]),s(" ( ⚠️ l'extension Spring ne semble pas supporter kotlin).")])])]),bn]),hn,n("ul",null,[fn,n("li",null,[s("Veuillez tester les routes avec un client REST. Vous pouvez trouver des fichiers "),_n,s(" ici au "),n("a",qn,[s("format JetBrains"),e(a)]),s(" ou "),n("a",yn,[s(" au format de l'extension REST Client de VSCode"),e(a)])])]),xn,n("ul",null,[n("li",null,[s("Créez un nouveau projet Spring en utilisant "),n("a",Sn,[s("Spring initializr"),e(a)]),s(" avec Kotlin et les dépendances suivantes : Spring Data JPA, H2 Database, Spring Boot DevTools, Spring Web.")]),Cn]),wn,e(p,null,{default:i(()=>[e(l,{title:"Sans DSL (Test Get All)"},{default:i(()=>[jn]),_:1}),e(l,{title:"Avec DSL (Test Get Single)"},{default:i(()=>[In]),_:1})]),_:1}),Pn,n("ul",null,[n("li",null,[n("a",Tn,[s("Projet Ktor"),e(a)])]),n("li",null,[n("a",An,[s("Projet nodejs"),e(a)])]),n("li",null,[n("a",Rn,[s("Projet Spring boot"),e(a)])])]),En,zn,n("ul",null,[n("li",null,[n("a",Gn,[s("Ce tutoriel de kotlinlang"),e(a)]),s(" montre comment créer un service web RESTful avec une base de données en utilisant Spring Boot.")]),n("li",null,[n("a",Dn,[s("Ce tutoriel de spring.io"),e(a)]),s(" montre comment construire une application web avec Spring Boot et Kotlin.")]),n("li",null,[n("a",Kn,[s("Rest APIs with Spring"),e(a)])]),n("li",null,[n("a",Bn,[s("Quarkus et Kotlin"),e(a)])])]),Jn,n("ul",null,[n("li",null,[n("a",Ln,[s("JS et Kotlin/JS"),e(a)])]),n("li",null,[n("a",Vn,[s("mockmvc kotlin dsl"),e(a)])]),n("li",null,[n("a",Mn,[s("spring-boot-kotlin tutorial"),e(a)])]),n("li",null,[n("a",On,[s("Kotlin et JPA"),e(a)])]),n("li",null,[n("a",Nn,[s("Spring Data JPA Comment utiliser les nulls Kotlin au lieu de Optional"),e(a)])])])])}const Un=c(d,[["render",Hn],["__file","index.html.vue"]]);export{Un as default};
